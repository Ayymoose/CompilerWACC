SIDE CONDITIONS: COMPLETE/TESTED - HENRYK/AYMAN

-    += -= /= *= %= -- ++

REMOVED MULTIPLE NON VAR STRING: COMPLETE/UNTESTED - NANA

NO CALL NO FUNCTION DEF: COMPLETE/UNTESTED - NANA

FOR LOOP: NOT COMPLETE - OLI

ALLOW FUNCTION CALLS OUTSIDE OF ASSIGNMENT: HENRYK ----------------------------- visitStatement.go needs to be complete

CLASSES: NOT COMPLETE - FRONTEND AND NANA/AYMAN/HENRYK

----

BNF UPDATE

<side effect> HENRYK PLEASE DO THIS

<stat> := ... | 'for' <expr> 'from' <expr> 'to' <expr> 'do' <stat> 'done' OLI

              | 'call' <ident> '(' <arg-list>? ')' HENRYK

              | 'call' <ident>'.'<ident> '(' <arg-list>? ')' HENRYK

// for <ident>'.'<ident> : check if the fist <ident> has a type class and that the class uses the function named in the second <ident>

<type> ::= ... | <class-ident> HENRYK

// To use the class ident type, the class must be previously defined

<program> ::= 'begin' <class>* <func>* <stat> 'end' HENRYK

// Only one class per program is allowed

<class-ident> := ('A'-'Z')('_'|'a'-'z'|'A'-'Z'|'0'-'9')* HENRYK

// class identifiers are not allowed to clash with any variable/function/variable/type names or keywords

<assign-rhs> := ... |'new' <class-ident>'('<arg-list>?')'

                    | 'call' <ident>'.'<ident> '(' <arg-list>? ')'

                    | 'this''.'<ident>

                    | <ident>'.'<ident>

// The correct number of arguments must be present for the instantiation of the object

<field> := <param>

<field-list> := <field>(',' <field>)*

<class> := 'class' <class-ident> 'open' <field-list>* <func>* 'close'

<stat> := ... | 'for' <expr> 'from' <expr> 'to' <expr> 'do' <stat> 'done'

              | 'call' <ident> '(' <arg-list>? ')'------------------------------NEED TO IMPLEMENT visitStatement IN visitStatement.GO FOR CALL node

              | 'call' <class-type>'.'<ident> '(' <arg-list>? ')'

<type> ::= ...| <class-type> ---------------------------------------------------CANT HAVE THIS AS THIS WOULD MEAN THAT FUNCTIONS CAN HAVE CLASS TYPES
